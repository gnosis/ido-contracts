{
  "address": "0xdC5f67d34aB3489b5bfD34645B7271615FAcdfA2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldAuctioningTokens",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "soldBiddingTokens",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "CancellationSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "ClaimedFromOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_auctioningToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderCancellationEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_auctionedSellAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_minBuyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        }
      ],
      "name": "NewAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "buyAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "sellAmount",
          "type": "uint96"
        }
      ],
      "name": "NewSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "NewUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "name": "UserRegistration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctionData",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderCancellationEndDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auctionEndDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "initialAuctionOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interimSumBidAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "interimOrder",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "clearingPriceOrder",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "volumeClearingPriceOrder",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "minFundingThresholdNotReached",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAtomicClosureAllowed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_sellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "orders",
          "type": "bytes32[]"
        }
      ],
      "name": "claimFromParticipantOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sumAuctioningTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumBiddingTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "order",
          "type": "bytes32"
        }
      ],
      "name": "containsOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiverUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSecondsRemainingInBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_auctioningToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_biddingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderCancelationPeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_auctionedSellAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_minBuyAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "minimumBiddingAmountPerOrder",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minFundingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAtomicClosureAllowed",
          "type": "bool"
        }
      ],
      "name": "initiateAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numUsers",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmounts",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrders",
          "type": "bytes32[]"
        }
      ],
      "name": "placeSellOrders",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iterationSteps",
          "type": "uint256"
        }
      ],
      "name": "precalculateSellAmountSum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "userId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newfeeReceiverAddress",
          "type": "address"
        }
      ],
      "name": "setFeeParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "clearingOrder",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_minBuyAmount",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_sellAmount",
          "type": "uint96[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_prevSellOrder",
          "type": "bytes32[]"
        }
      ],
      "name": "settleAuctionAtomically",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55427d94b761837f93dcc14fb085b22a09f3c5ee92d654ad4c3059eaa8fe418a",
  "receipt": {
    "to": null,
    "from": "0xfB696e9E9e5038DDc78592082689B149AB3a19d5",
    "contractAddress": "0xdC5f67d34aB3489b5bfD34645B7271615FAcdfA2",
    "transactionIndex": 6,
    "gasUsed": "3419821",
    "logsBloom": "0x
    "blockHash": "0x8ef8ca75e88c18825d6a8cce538e3cf742c535a41e0381ceeef80604599817ae",
    "transactionHash": "0x55427d94b761837f93dcc14fb085b22a09f3c5ee92d654ad4c3059eaa8fe418a",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 7975029,
        "transactionHash": "0x55427d94b761837f93dcc14fb085b22a09f3c5ee92d654ad4c3059eaa8fe418a",
        "address": "0xdC5f67d34aB3489b5bfD34645B7271615FAcdfA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb696e9e9e5038ddc78592082689b149ab3a19d5"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x8ef8ca75e88c18825d6a8cce538e3cf742c535a41e0381ceeef80604599817ae"
      }
    ],
    "blockNumber": 7975029,
    "cumulativeGasUsed": "4912215",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f5b28dc22056380bfce1595787bb4937",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldAuctioningTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldBiddingTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interimSumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interimOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"minFundingThresholdNotReached\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumAuctioningTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumBiddingTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancelationPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeReceiverAddress\",\"type\":\"address\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"clearingOrder\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrder\",\"type\":\"bytes32[]\"}],\"name\":\"settleAuctionAtomically\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EasyAuction.sol\":\"EasyAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/EasyAuction.sol\":{\"content\":\"pragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EasyAuction is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].orderCancellationEndDate,\\n            \\\"no longer in order placement and cancelation phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        {\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\n            require(\\n                auctionEndDate != 0 &&\\n                    block.timestamp >= auctionEndDate &&\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\\n                \\\"Auction not in solution submission phase\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\n            \\\"Auction not yet finished\\\"\\n        );\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event ClaimedFromOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\n    event NewAuction(\\n        uint256 indexed auctionId,\\n        IERC20 indexed _auctioningToken,\\n        IERC20 indexed _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold\\n    );\\n    event AuctionCleared(\\n        uint256 indexed auctionId,\\n        uint96 soldAuctioningTokens,\\n        uint96 soldBiddingTokens,\\n        bytes32 clearingPriceOrder\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders;\\n    mapping(uint256 => AuctionData) public auctionData;\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers;\\n    uint256 public auctionCounter;\\n\\n    constructor() public Ownable() {}\\n\\n    uint256 public feeNumerator = 0;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint64 public feeReceiverUserId = 1;\\n\\n    function setFeeParameters(\\n        uint256 newFeeNumerator,\\n        address newfeeReceiverAddress\\n    ) public onlyOwner() {\\n        require(\\n            newFeeNumerator <= 15,\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\n        );\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\n        feeNumerator = newFeeNumerator;\\n    }\\n\\n    // @dev: function to intiate a new auction\\n    // Warning: In case the auction is expected to raise more than\\n    // 2^96 units of the biddingToken, don't start the auction, as\\n    // it will not be settlable. This corresponds to about 79\\n    // billion DAI.\\n    //\\n    // Prices between biddingToken and auctioningToken are expressed by a\\n    // fraction whose components are stored as uint96.\\n    function initiateAuction(\\n        IERC20 _auctioningToken,\\n        IERC20 _biddingToken,\\n        uint256 orderCancelationPeriodDuration,\\n        uint256 duration,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed\\n    ) public returns (uint256) {\\n        uint64 userId = getUserId(msg.sender);\\n\\n        // withdraws sellAmount + fees\\n        _auctioningToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\n                FEE_DENOMINATOR\\n            ) //[0]\\n        );\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\n        require(\\n            minimumBiddingAmountPerOrder > 0,\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\n        );\\n        require(\\n            orderCancelationPeriodDuration <= duration,\\n            \\\"time periods are not configured correctly\\\"\\n        );\\n        auctionCounter++;\\n        sellOrders[auctionCounter].initializeEmptyList();\\n\\n        uint256 orderCancellationEndDate =\\n            block.timestamp + orderCancelationPeriodDuration;\\n        uint256 auctionEndDate = block.timestamp + duration;\\n        auctionData[auctionCounter] = AuctionData(\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmount,\\n                _auctionedSellAmount\\n            ),\\n            minimumBiddingAmountPerOrder,\\n            0,\\n            IterableOrderedOrderSet.QUEUE_START,\\n            bytes32(0),\\n            0,\\n            false,\\n            isAtomicClosureAllowed,\\n            feeNumerator,\\n            minFundingThreshold\\n        );\\n        emit NewAuction(\\n            auctionCounter,\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            _auctionedSellAmount,\\n            _minBuyAmount,\\n            minimumBiddingAmountPerOrder,\\n            minFundingThreshold\\n        );\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders\\n    ) public atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders\\n            );\\n    }\\n\\n    function _placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders\\n    ) internal returns (uint64 userId) {\\n        (\\n            ,\\n            uint96 buyAmountOfInitialAuctionOrder,\\n            uint96 sellAmountOfInitialAuctionOrder\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(msg.sender);\\n        uint256 minimumBiddingAmountPerOrder =\\n            auctionData[auctionId].minimumBiddingAmountPerOrder;\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                    sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                \\\"limit price not better than mimimal offer\\\"\\n            );\\n            // orders should have a minimum bid size in order to limit the gas\\n            // required to compute the final price of the auction.\\n            require(\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\n                \\\"order too small\\\"\\n            );\\n            bool success =\\n                sellOrders[auctionId].insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                );\\n            if (success) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i]\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sumOfSellAmounts\\n        ); //[1]\\n    }\\n\\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\\n        public\\n        atStageOrderPlacementAndCancelation(auctionId)\\n    {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            // Note: we keep the back pointer of the deleted element so that\\n            // it can be used as a reference point to insert a new node.\\n            bool success =\\n                sellOrders[auctionId].removeKeepHistory(_sellOrders[i]);\\n            if (success) {\\n                (\\n                    uint64 userIdOfIter,\\n                    uint96 buyAmountOfIter,\\n                    uint96 sellAmountOfIter\\n                ) = _sellOrders[i].decodeOrder();\\n                require(\\n                    userIdOfIter == userId,\\n                    \\\"Only the user can cancel his orders\\\"\\n                );\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransfer(\\n            msg.sender,\\n            claimableAmount\\n        ); //[2]\\n    }\\n\\n    function precalculateSellAmountSum(\\n        uint256 auctionId,\\n        uint256 iterationSteps\\n    ) public atStageSolutionSubmission(auctionId) {\\n        (, , uint96 auctioneerSellAmount) =\\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\n        }\\n\\n        require(\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\n            \\\"reached end of order list\\\"\\n        );\\n\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than initially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) =\\n            iterOrder.decodeOrder();\\n        require(\\n            sumBidAmount.mul(buyAmountOfIter) <\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\n            \\\"too many orders summed up\\\"\\n        );\\n\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\n        auctionData[auctionId].interimOrder = iterOrder;\\n    }\\n\\n    function settleAuctionAtomically(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmount,\\n        uint96[] memory _sellAmount,\\n        bytes32[] memory _prevSellOrder\\n    ) public atStageSolutionSubmission(auctionId) {\\n        require(\\n            auctionData[auctionId].isAtomicClosureAllowed,\\n            \\\"not allowed to settle auction atomically\\\"\\n        );\\n        require(\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\n            \\\"Only one order can be placed atomically\\\"\\n        );\\n        uint64 userId = getUserId(msg.sender);\\n        require(\\n            auctionData[auctionId].interimOrder.smallerThan(\\n                IterableOrderedOrderSet.encodeOrder(\\n                    userId,\\n                    _minBuyAmount[0],\\n                    _sellAmount[0]\\n                )\\n            ),\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\n        );\\n        _placeSellOrders(auctionId, _minBuyAmount, _sellAmount, _prevSellOrder);\\n        settleAuction(auctionId);\\n    }\\n\\n    // @dev function settling the auction and calculating the price\\n    function settleAuction(uint256 auctionId)\\n        public\\n        atStageSolutionSubmission(auctionId)\\n        returns (bytes32 clearingOrder)\\n    {\\n        (\\n            uint64 auctioneerId,\\n            uint96 minAuctionedBuyAmount,\\n            uint96 fullAuctionedAmount\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\n        uint256 buyAmountOfIter;\\n        uint256 sellAmountOfIter;\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\n        do {\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\n                break;\\n            }\\n            currentOrder = nextOrder;\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\n        } while (\\n            currentBidSum.mul(buyAmountOfIter) <\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\n        );\\n\\n        if (\\n            currentBidSum > 0 &&\\n            currentBidSum.mul(buyAmountOfIter) >=\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\n        ) {\\n            // All considered/summed orders are sufficient to close the auction fully\\n            // at price between current and previous orders.\\n            uint256 uncoveredBids =\\n                currentBidSum.sub(\\n                    fullAuctionedAmount.mul(sellAmountOfIter).div(\\n                        buyAmountOfIter\\n                    )\\n                );\\n\\n            if (sellAmountOfIter >= uncoveredBids) {\\n                //[13]\\n                // Auction fully filled via partial match of currentOrder\\n                uint256 sellAmountClearingOrder =\\n                    sellAmountOfIter.sub(uncoveredBids);\\n                auctionData[auctionId]\\n                    .volumeClearingPriceOrder = sellAmountClearingOrder\\n                    .toUint96();\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\n                clearingOrder = currentOrder;\\n            } else {\\n                //[14]\\n                // Auction fully filled via price strictly between currentOrder and the order\\n                // immediately before. For a proof, see the security-considerations.md\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            }\\n        } else {\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\n            // Either a higher price must be used or auction is only partially filled\\n\\n            if (currentBidSum > minAuctionedBuyAmount) {\\n                //[15]\\n                // Price higher than last order would fill the auction\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            } else {\\n                //[16]\\n                // Even at the initial auction price, the auction is partially filled\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    minAuctionedBuyAmount\\n                );\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\n                    .mul(fullAuctionedAmount)\\n                    .div(minAuctionedBuyAmount)\\n                    .toUint96();\\n            }\\n        }\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\n\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\n        }\\n        processFeesAndAuctioneerFunds(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            auctioneerId,\\n            fullAuctionedAmount\\n        );\\n        emit AuctionCleared(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            uint96(currentBidSum),\\n            clearingOrder\\n        );\\n        // Gas refunds\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        auctionData[auctionId].interimOrder = bytes32(0);\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\n    }\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    )\\n        public\\n        atStageFinished(auctionId)\\n        returns (\\n            uint256 sumAuctioningTokenAmount,\\n            uint256 sumBiddingTokenAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // Note: we don't need to keep any information about the node since\\n            // no new elements need to be inserted.\\n            require(\\n                sellOrders[auctionId].remove(orders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n        }\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) =\\n            auction.clearingPriceOrder.decodeOrder();\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        bool minFundingThresholdNotReached =\\n            auctionData[auctionId].minFundingThresholdNotReached;\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) =\\n                orders[i].decodeOrder();\\n            require(\\n                userIdOrder == userId,\\n                \\\"only allowed to claim for same user\\\"\\n            );\\n            if (minFundingThresholdNotReached) {\\n                //[10]\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\n            } else {\\n                //[23]\\n                if (orders[i] == auction.clearingPriceOrder) {\\n                    //[25]\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                        auction\\n                            .volumeClearingPriceOrder\\n                            .mul(priceNumerator)\\n                            .div(priceDenominator)\\n                    );\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\\n                    );\\n                } else {\\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\n                        //[17]\\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\n                        );\\n                    } else {\\n                        //[24]\\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                            sellAmount\\n                        );\\n                    }\\n                }\\n            }\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\n        }\\n        sendOutTokens(\\n            auctionId,\\n            sumAuctioningTokenAmount,\\n            sumBiddingTokenAmount,\\n            userId\\n        ); //[3]\\n    }\\n\\n    function processFeesAndAuctioneerFunds(\\n        uint256 auctionId,\\n        uint256 fillVolumeOfAuctioneerOrder,\\n        uint64 auctioneerId,\\n        uint96 fullAuctionedAmount\\n    ) internal {\\n        uint256 feeAmount =\\n            fullAuctionedAmount.mul(auctionData[auctionId].feeNumerator).div(\\n                FEE_DENOMINATOR\\n            ); //[20]\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\n            sendOutTokens(\\n                auctionId,\\n                fullAuctionedAmount.add(feeAmount),\\n                0,\\n                auctioneerId\\n            ); //[4]\\n        } else {\\n            //[11]\\n            (, uint96 priceNumerator, uint96 priceDenominator) =\\n                auctionData[auctionId].clearingPriceOrder.decodeOrder();\\n            uint256 unsettledAuctionTokens =\\n                fullAuctionedAmount.sub(fillVolumeOfAuctioneerOrder);\\n            uint256 auctioningTokenAmount =\\n                unsettledAuctionTokens.add(\\n                    feeAmount.mul(unsettledAuctionTokens).div(\\n                        fullAuctionedAmount\\n                    )\\n                );\\n            uint256 biddingTokenAmount =\\n                fillVolumeOfAuctioneerOrder.mul(priceDenominator).div(\\n                    priceNumerator\\n                );\\n            sendOutTokens(\\n                auctionId,\\n                auctioningTokenAmount,\\n                biddingTokenAmount,\\n                auctioneerId\\n            ); //[5]\\n            sendOutTokens(\\n                auctionId,\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\n                    fullAuctionedAmount\\n                ),\\n                0,\\n                feeReceiverUserId\\n            ); //[7]\\n        }\\n    }\\n\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 auctioningTokenAmount,\\n        uint256 biddingTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (auctioningTokenAmount > 0) {\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\n                userAddress,\\n                auctioningTokenAmount\\n            );\\n        }\\n        if (biddingTokenAmount > 0) {\\n            auctionData[auctionId].biddingToken.safeTransfer(\\n                userAddress,\\n                biddingTokenAmount\\n            );\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        numUsers = numUsers.add(1).toUint64();\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            userId = registeredUsers.getId(user);\\n        } else {\\n            userId = registerUser(user);\\n            emit NewUser(userId, user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(uint256 auctionId, bytes32 order)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return sellOrders[auctionId].contains(order);\\n    }\\n}\\n\",\"keccak256\":\"0xcbe424bf427443484818565018d92617f7833d9185d3ab203b25641f1aba85aa\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// Contract does not have test coverage, as it was nearly copied from:\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\n// The only change is uint16 -> uint64\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x93efb312cc8c4956c462453559c8c0e1c090a0ac1f454d2ac9055fb7e4e3129d\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"Inserting element is not valid\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount and\\n    // 2. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x339ccb61fa491b312546d9aa7afd0ac24846cf8c1ae5b05368d959fba2bcc6e9\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\",\"keccak256\":\"0x9f12a3c511cd8ea260bc8faa7d2e4d59a823328ef07c26af506385aa3e92b200\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600755600880546001600160401b03191660011790553480156200002957600080fd5b5060006200003662000086565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200008a565b3390565b613c27806200009a6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806363c699a4116100d8578063a2d1338b1161008c578063d73792a911610066578063d73792a91461094b578063e86dea4a14610953578063f2fde38b1461095b57610177565b8063a2d1338b146105df578063a7e7664414610791578063cc7631091461079957610177565b80637882deaf116100bd5780637882deaf146104415780637ed18b70146105045780638da5cb5b146105ae57610177565b806363c699a414610402578063715018a61461043957610177565b80632e9936111161012f57806340b20b091161011457806340b20b09146102f557806355fc62d21461032e5780635cefb291146103fa57610177565b80632e993611146102b35780633e12905f146102d057610177565b806319a50f491161016057806319a50f49146102285780632199d5cd1461024d5780632b956ff71461028057610177565b8063078dc5f81461017c57806315d37b4b1461020b575b600080fd5b6101f9600480360361012081101561019357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060810135906bffffffffffffffffffffffff608082013581169160a08101359091169060c08101359060e0810135906101000135151561098e565b60408051918252519081900360200190f35b6101f96004803603602081101561022157600080fd5b5035610e2e565b610230610e73565b6040805167ffffffffffffffff9092168252519081900360200190f35b6102306004803603602081101561026357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e83565b6102306004803603602081101561029657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f9f565b6101f9600480360360208110156102c957600080fd5b5035611021565b6102f3600480360360408110156102e657600080fd5b508035906020013561140c565b005b6102f36004803603604081101561030b57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661165e565b61034b6004803603602081101561034457600080fd5b503561175d565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b61023061180d565b6104256004803603604081101561041857600080fd5b508035906020013561181d565b604080519115158252519081900360200190f35b6102f361183e565b6104eb6004803603604081101561045757600080fd5b8135919081019060408101602082013564010000000081111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460208302840111640100000000831117156104ad57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611924945050505050565b6040805192835260208301919091528051918290030190f35b6102f36004803603604081101561051a57600080fd5b8135919081019060408101602082013564010000000081111561053c57600080fd5b82018360208201111561054e57600080fd5b8035906020019184602083028401116401000000008311171561057057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611dee945050505050565b6105b6611fc0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102f3600480360360808110156105f557600080fd5b8135919081019060408101602082013564010000000081111561061757600080fd5b82018360208201111561062957600080fd5b8035906020019184602083028401116401000000008311171561064b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561069b57600080fd5b8201836020820111156106ad57600080fd5b803590602001918460208302840111640100000000831117156106cf57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561071f57600080fd5b82018360208201111561073157600080fd5b8035906020019184602083028401116401000000008311171561075357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611fdc945050505050565b6101f96121b9565b610230600480360360808110156107af57600080fd5b813591908101906040810160208201356401000000008111156107d157600080fd5b8201836020820111156107e357600080fd5b8035906020019184602083028401116401000000008311171561080557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561085557600080fd5b82018360208201111561086757600080fd5b8035906020019184602083028401116401000000008311171561088957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156108d957600080fd5b8201836020820111156108eb57600080fd5b8035906020019184602083028401116401000000008311171561090d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506121bf945050505050565b6101f9612226565b6101f961222c565b6102f36004803603602081101561097157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612232565b60008061099a33610f9f565b90506109fb33306109dc6103e86109d66109c16007546103e861238890919063ffffffff16565b6bffffffffffffffffffffffff8e16906123e2565b9061243b565b73ffffffffffffffffffffffffffffffffffffffff8f1692919061247d565b6000876bffffffffffffffffffffffff1611610a5e576040805162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742061756374696f6e207a65726f20746f6b656e73000000000000604482015290519081900360640190fd5b6000866bffffffffffffffffffffffff1611610aab5760405162461bcd60e51b81526004018080602001828103825260238152602001806139446023913960400191505060405180910390fd5b60008511610aea5760405162461bcd60e51b8152600401808060200182810382526036815260200180613a5f6036913960400191505060405180910390fd5b87891115610b295760405162461bcd60e51b8152600401808060200182810382526029815260200180613b7d6029913960400191505060405180910390fd5b60068054600190810191829055600091825260205260409020610b4b90612518565b604080516101c08101825273ffffffffffffffffffffffffffffffffffffffff808e1682528c16602082015242808c019282018390528a01606082018190529060808101610b9a858b8d61255c565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff168152602001600015158152602001861515815260200160075481526020018781525060026000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff166006547fa92661149edb0f48f9ae55773e4d477ab8a61006bd5204ff2596fd0f85546d1885858e8e8e8e60405180878152602001868152602001856bffffffffffffffffffffffff168152602001846bffffffffffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390a450506006549b9a5050505050505050505050565b600081815260026020526040812060030154421115610e4f57506000610e6e565b600082815260026020526040902060030154610e6b90426125bb565b90505b919050565b60055467ffffffffffffffff1681565b600554600090610ea790610ea29067ffffffffffffffff166001612388565b6125fd565b600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9283161790819055610eec91600391168461264a565b610f3d576040805162461bcd60e51b815260206004820152601760248201527f5573657220616c72656164792072656769737465726564000000000000000000604482015290519081900360640190fd5b506005546040805167ffffffffffffffff9092168083529051909173ffffffffffffffffffffffffffffffffffffffff8416917f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c9181900360200190a2919050565b6000610fac600383612829565b15610fc357610fbc600383612861565b9050610e6e565b610fcc82610e83565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a3919050565b600081815260026020526040812060030154829080158015906110445750804210155b801561105f5750600082815260026020526040902060080154155b61109a5760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b50600083815260026020526040812060040154819081906110ba90612917565b6000898152600260205260408120600681015460079091015494975092955090935090919080845b60008b81526001602052604081206110fa9086612926565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000181141561112a5750611183565b80945061113685612917565b6bffffffffffffffffffffffff918216965016935061115790508684612388565b955061117390506bffffffffffffffffffffffff8716836123e2565b61117d86856123e2565b106110e2575b6000851180156111b357506111a66bffffffffffffffffffffffff8716836123e2565b6111b086856123e2565b10155b1561128a5760006111e06111d9856109d66bffffffffffffffffffffffff8b16876123e2565b87906125bb565b90508083106112615760006111f584836125bb565b9050611200816129d2565b60008e815260026020526040902060090180547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9290921691909117905561125687836125bb565b9650859b5050611284565b61126b86846125bb565b955061128160008861127c896129d2565b61255c565b9a505b50611302565b866bffffffffffffffffffffffff168511156112b6576112af60008761127c886129d2565b9950611302565b6112c26000878961255c565b99506112ff6112fa886bffffffffffffffffffffffff166109d6896bffffffffffffffffffffffff16896123e290919063ffffffff16565b6129d2565b90505b60008b8152600260205260409020600881018b9055600b01548510156113695760008b815260026020526040902060090180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff166c010000000000000000000000001790555b6113838b826bffffffffffffffffffffffff168a89612a1f565b604080516bffffffffffffffffffffffff8084168252871660208201528082018c905290518c917f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f5910919081900360600190a25050506000978852505060026020525050604084206004810185905560078101859055600681018590556005019390935550919050565b6000828152600260205260409020600301548290801580159061142f5750804210155b801561144a5750600082815260026020526040902060080154155b6114855760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b506000838152600260205260408120600401546114a190612917565b6000878152600260205260408120600681015460079091015492955093509091505b858110156115195760008781526001602052604090206114e39083612926565b915060006114f083612917565b925061150e91508590506bffffffffffffffffffffffff8316612388565b9350506001016114c3565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000181141561158f576040805162461bcd60e51b815260206004820152601960248201527f7265616368656420656e64206f66206f72646572206c69737400000000000000604482015290519081900360640190fd5b60008061159b83612917565b92509250506115cf816bffffffffffffffffffffffff16866bffffffffffffffffffffffff166123e290919063ffffffff16565b6115e7856bffffffffffffffffffffffff85166123e2565b10611639576040805162461bcd60e51b815260206004820152601960248201527f746f6f206d616e79206f72646572732073756d6d656420757000000000000000604482015290519081900360640190fd5b5050600095865260026020526040909520600681019190915560070193909355505050565b611666612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146116d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600f8211156117155760405162461bcd60e51b815260040180806020018281038252602d8152602001806139e1602d913960400191505060405180910390fd5b61171e81610f9f565b600880547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691909117905550600755565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460088801546009890154600a8a0154600b909a015473ffffffffffffffffffffffffffffffffffffffff998a169b9099169997989697959694959394929391926bffffffffffffffffffffffff82169260ff6c0100000000000000000000000084048116936d0100000000000000000000000000900416918e565b60085467ffffffffffffffff1681565b60008281526001602052604081206118359083612b9a565b90505b92915050565b611846612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146118b5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000828152600260205260408120600801548190849061198b576040805162461bcd60e51b815260206004820152601860248201527f41756374696f6e206e6f74207965742066696e69736865640000000000000000604482015290519081900360640190fd5b60005b8451811015611a28576119cf8582815181106119a657fe5b602002602001015160016000898152602001908152602001600020612bc390919063ffffffff16565b611a20576040805162461bcd60e51b815260206004820152601c60248201527f6f72646572206973206e6f206c6f6e67657220636c61696d61626c6500000000604482015290519081900360640190fd5b60010161198e565b50611a31613807565b50600085815260026020818152604080842081516101c081018352815473ffffffffffffffffffffffffffffffffffffffff90811682526001830154169381019390935292830154908201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820181905260098301546bffffffffffffffffffffffff811661012084015260ff6c010000000000000000000000008204811615156101408501526d0100000000000000000000000000909104161515610160830152600a830154610180830152600b909201546101a082015291908190611b3190612917565b92509250506000611b5588600081518110611b4857fe5b6020026020010151612917565b505060008a8152600260205260408120600901549192506c0100000000000000000000000090910460ff16905b8951811015611dd4576000806000611b9f8d8581518110611b4857fe5b9250925092508567ffffffffffffffff168367ffffffffffffffff1614611bf75760405162461bcd60e51b8152600401808060200182810382526023815260200180613adc6023913960400191505060405180910390fd5b8415611c1c57611c158b6bffffffffffffffffffffffff8316612388565b9a50611d62565b8861010001518d8581518110611c2e57fe5b60200260200101511415611ccc57611c8c611c85886bffffffffffffffffffffffff166109d68b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff166123e290919063ffffffff16565b8d90612388565b9b50611c15611cc58a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff166125bb90919063ffffffff16565b8c90612388565b611cf78961010001518e8681518110611ce157fe5b6020026020010151612bef90919063ffffffff16565b15611d4757611d40611c85886bffffffffffffffffffffffff166109d68b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff166123e290919063ffffffff16565b9b50611d62565b611d5f8b6bffffffffffffffffffffffff8316612388565b9a505b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a3505050600101611b82565b50611de18a898985612d3c565b5050505050509250929050565b6000828152600260208190526040909120015482904210611e405760405162461bcd60e51b81526004018080602001828103825260328152602001806139676032913960400191505060405180910390fd5b6000611e4b33610f9f565b90506000805b8451811015611f85576000611e94868381518110611e6b57fe5b6020026020010151600160008a8152602001908152602001600020612dba90919063ffffffff16565b90508015611f7c576000806000611eb0898681518110611b4857fe5b9250925092508667ffffffffffffffff168367ffffffffffffffff1614611f085760405162461bcd60e51b81526004018080602001828103825260238152602001806138fb6023913960400191505060405180910390fd5b611f20866bffffffffffffffffffffffff8316612388565b604080516bffffffffffffffffffffffff808616825284166020820152815192985067ffffffffffffffff8a16928d927f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4928290030190a35050505b50600101611e51565b50600085815260026020526040902060010154611fb99073ffffffffffffffffffffffffffffffffffffffff163383612e0f565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60008481526002602052604090206003015484908015801590611fff5750804210155b801561201a5750600082815260026020526040902060080154155b6120555760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b506000858152600260205260409020600901546d0100000000000000000000000000900460ff166120b75760405162461bcd60e51b81526004018080602001828103825260288152602001806138a26028913960400191505060405180910390fd5b835160011480156120c9575082516001145b6121045760405162461bcd60e51b8152600401808060200182810382526027815260200180613a0e6027913960400191505060405180910390fd5b600061210f33610f9f565b905061215f612147828760008151811061212557fe5b60200260200101518760008151811061213a57fe5b602002602001015161255c565b60008881526002602052604090206007015490612bef565b61219a5760405162461bcd60e51b81526004018080602001828103825260318152602001806138ca6031913960400191505060405180910390fd5b6121a686868686612ea1565b506121b086611021565b50505050505050565b60065481565b600084815260026020526040812060030154859042106122105760405162461bcd60e51b8152600401808060200182810382526022815260200180613bd06022913960400191505060405180910390fd5b61221c86868686612ea1565b9695505050505050565b6103e881565b60075481565b61223a612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146122a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166122fb5760405162461bcd60e51b815260040180806020018281038252602681526020018061391e6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082820183811015611835576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826123f157506000611838565b828202828482816123fe57fe5b04146118355760405162461bcd60e51b8152600401808060200182810382526021815260200180613a956021913960400191505060405180910390fd5b600061183583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613199565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261251290859061323b565b50505050565b60016000818152602083815260408083207fffffffffffffffffffffffffffffffffffffffff00000000000000000000000190819055835293830190529190912055565b7fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b1677ffffffffffffffffffffffff000000000000000000000000606084901b16016bffffffffffffffffffffffff8216015b9392505050565b600061183583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506132f9565b60006801000000000000000082106126465760405162461bcd60e51b8152600401808060200182810382526026815260200180613ab66026913960400191505060405180910390fd5b5090565b600073ffffffffffffffffffffffffffffffffffffffff82166126b4576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420696e73657274207a65726f2061646472657373000000000000604482015290519081900360640190fd5b67ffffffffffffffff8381161415612713576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e73657274206d61782075696e7436340000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260018501602052604090205467ffffffffffffffff16151580612783575067ffffffffffffffff600184011660009081526020859052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b15612790575060006125b4565b50600191820167ffffffffffffffff1660008181526020858152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff969096169586179055938252948401909452922080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690921790915590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205467ffffffffffffffff16151590565b600061286d8383612829565b6128be576040805162461bcd60e51b815260206004820152601b60248201527f4d7573742068617665204164647265737320746f206765742049440000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205467ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60c081901c91606082901c9190565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000018214156129875760405162461bcd60e51b81526004018080602001828103825260228152602001806139996022913960400191505060405180910390fd5b600082815260208490526040902054806118355760405162461bcd60e51b815260040180806020018281038252602a815260200180613a35602a913960400191505060405180910390fd5b60006c0100000000000000000000000082106126465760405162461bcd60e51b815260040180806020018281038252602681526020018061387c6026913960400191505060405180910390fd5b6000848152600260205260408120600a0154612a52906103e8906109d6906bffffffffffffffffffffffff8616906123e2565b6000868152600260205260409020600901549091506c01000000000000000000000000900460ff1615612aa857612aa385612a9b6bffffffffffffffffffffffff851684612388565b600086612d3c565b611fb9565b6000858152600260205260408120600801548190612ac590612917565b909350915060009050612ae66bffffffffffffffffffffffff8616886125bb565b90506000612b10612b096bffffffffffffffffffffffff88166109d688866123e2565b8390612388565b90506000612b47856bffffffffffffffffffffffff166109d6866bffffffffffffffffffffffff168c6123e290919063ffffffff16565b9050612b558a83838b612d3c565b612b8a8a612b756bffffffffffffffffffffffff8a166109d68a8e6123e2565b60085460009067ffffffffffffffff16612d3c565b50505050505050505050565b3390565b60006001821415612bad57506000611838565b5060009081526020919091526040902054151590565b600080612bd08484612dba565b9050801561183557600092835260019390930160205250604081205590565b600080600080612bfe86612917565b9250925092506000806000612c1288612917565b91945092509050612c346bffffffffffffffffffffffff8084169086166123e2565b612c4f6bffffffffffffffffffffffff8781169084166123e2565b1015612c645760019650505050505050611838565b612c7f6bffffffffffffffffffffffff8381169086166123e2565b612c9a6bffffffffffffffffffffffff8781169084166123e2565b1115612caf5760009650505050505050611838565b8267ffffffffffffffff168667ffffffffffffffff161415612d025760405162461bcd60e51b815260040180806020018281038252602d815260200180613b27602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015612d2d5760019650505050505050611838565b50600098975050505050505050565b6000612d49600383613353565b90508315612d8157600085815260026020526040902054612d819073ffffffffffffffffffffffffffffffffffffffff168286612e0f565b8215611fb957600085815260026020526040902060010154611fb99073ffffffffffffffffffffffffffffffffffffffff168285612e0f565b6000612dc68383612b9a565b612dd257506000611838565b5060008181526001838101602081815260408085205487835281862080548288528388208190558752938352908520559383529390925290915590565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612e9c90849061323b565b505050565b60008481526002602052604081206004015481908190612ec090612917565b92509250506000612ed033610f9f565b6000898152600260205260408120600501549195505b885181101561315857612f31888281518110612efe57fe5b60200260200101516bffffffffffffffffffffffff16856bffffffffffffffffffffffff166123e290919063ffffffff16565b612f73866bffffffffffffffffffffffff168b8481518110612f4f57fe5b60200260200101516bffffffffffffffffffffffff166123e290919063ffffffff16565b10612faf5760405162461bcd60e51b8152600401808060200182810382526029815260200180613b546029913960400191505060405180910390fd5b81888281518110612fbc57fe5b60200260200101516bffffffffffffffffffffffff1611613024576040805162461bcd60e51b815260206004820152600f60248201527f6f7264657220746f6f20736d616c6c0000000000000000000000000000000000604482015290519081900360640190fd5b600061308361304d888c858151811061303957fe5b60200260200101518c868151811061213a57fe5b89848151811061305957fe5b6020026020010151600160008f81526020019081526020016000206133e79092919063ffffffff16565b9050801561314f576130bf89838151811061309a57fe5b60200260200101516bffffffffffffffffffffffff168561238890919063ffffffff16565b93508667ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c85815181106130fa57fe5b60200260200101518c868151811061310e57fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b50600101612ee6565b5060008981526002602052604090206001015461318d9073ffffffffffffffffffffffffffffffffffffffff1633308561247d565b50505050949350505050565b600081836132255760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131ea5781810151838201526020016131d2565b50505050905090810190601f1680156132175780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161323157fe5b0495945050505050565b606061329d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135c59092919063ffffffff16565b805190915015612e9c578080602001905160208110156132bc57600080fd5b5051612e9c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ba6602a913960400191505060405180910390fd5b6000818484111561334b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156131ea5781810151838201526020016131d2565b505050900390565b600061335f83836135dc565b6133b0576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520494420746f2067657420416464726573730000000000604482015290519081900360640190fd5b5060010167ffffffffffffffff166000908152602091909152604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000806133f384612917565b925050506bffffffffffffffffffffffff8116613457576040805162461bcd60e51b815260206004820152601f60248201527f496e73657274696e67207a65726f206973206e6f7420737570706f7274656400604482015290519081900360640190fd5b6001841480159061348857507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000018414155b6134d9576040805162461bcd60e51b815260206004820152601e60248201527f496e73657274696e6720656c656d656e74206973206e6f742076616c69640000604482015290519081900360640190fd5b6134e38585612b9a565b156134f25760009150506125b4565b6001831480159061351157506000838152600186016020526040902054155b156135205760009150506125b4565b61352a8385612bef565b6135385760009150506125b4565b5b6000838152602086905260409020546135645760009283526001850160205260409092205491613539565b6000835b6000818152602088905260409020549091506135848187612bef565b613568576000828152602088815260408083208990558383526001808b0183528184208a905589845281842095909555908990529020559150509392505050565b60606135d48484600085613614565b949350505050565b60010167ffffffffffffffff166000908152602091909152604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b6060824710156136555760405162461bcd60e51b81526004018080602001828103825260268152602001806139bb6026913960400191505060405180910390fd5b61365e8561379b565b6136af576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061371957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016136dc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461377b576040519150601f19603f3d011682016040523d82523d6000602084013e613780565b606091505b50915091506137908282866137a1565b979650505050505050565b3b151590565b606083156137b05750816125b4565b8251156137c05782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131ea5781810151838201526020016131d2565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091529056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e207068617365547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e35254f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a2646970667358221220f95a61e281d5ecad9af81b4bbc3d8066bf9d1e2aea7152e90ca8d4b78d25027964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806363c699a4116100d8578063a2d1338b1161008c578063d73792a911610066578063d73792a91461094b578063e86dea4a14610953578063f2fde38b1461095b57610177565b8063a2d1338b146105df578063a7e7664414610791578063cc7631091461079957610177565b80637882deaf116100bd5780637882deaf146104415780637ed18b70146105045780638da5cb5b146105ae57610177565b806363c699a414610402578063715018a61461043957610177565b80632e9936111161012f57806340b20b091161011457806340b20b09146102f557806355fc62d21461032e5780635cefb291146103fa57610177565b80632e993611146102b35780633e12905f146102d057610177565b806319a50f491161016057806319a50f49146102285780632199d5cd1461024d5780632b956ff71461028057610177565b8063078dc5f81461017c57806315d37b4b1461020b575b600080fd5b6101f9600480360361012081101561019357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060810135906bffffffffffffffffffffffff608082013581169160a08101359091169060c08101359060e0810135906101000135151561098e565b60408051918252519081900360200190f35b6101f96004803603602081101561022157600080fd5b5035610e2e565b610230610e73565b6040805167ffffffffffffffff9092168252519081900360200190f35b6102306004803603602081101561026357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e83565b6102306004803603602081101561029657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f9f565b6101f9600480360360208110156102c957600080fd5b5035611021565b6102f3600480360360408110156102e657600080fd5b508035906020013561140c565b005b6102f36004803603604081101561030b57600080fd5b508035906020013573ffffffffffffffffffffffffffffffffffffffff1661165e565b61034b6004803603602081101561034457600080fd5b503561175d565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b61023061180d565b6104256004803603604081101561041857600080fd5b508035906020013561181d565b604080519115158252519081900360200190f35b6102f361183e565b6104eb6004803603604081101561045757600080fd5b8135919081019060408101602082013564010000000081111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460208302840111640100000000831117156104ad57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611924945050505050565b6040805192835260208301919091528051918290030190f35b6102f36004803603604081101561051a57600080fd5b8135919081019060408101602082013564010000000081111561053c57600080fd5b82018360208201111561054e57600080fd5b8035906020019184602083028401116401000000008311171561057057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611dee945050505050565b6105b6611fc0565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6102f3600480360360808110156105f557600080fd5b8135919081019060408101602082013564010000000081111561061757600080fd5b82018360208201111561062957600080fd5b8035906020019184602083028401116401000000008311171561064b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561069b57600080fd5b8201836020820111156106ad57600080fd5b803590602001918460208302840111640100000000831117156106cf57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561071f57600080fd5b82018360208201111561073157600080fd5b8035906020019184602083028401116401000000008311171561075357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611fdc945050505050565b6101f96121b9565b610230600480360360808110156107af57600080fd5b813591908101906040810160208201356401000000008111156107d157600080fd5b8201836020820111156107e357600080fd5b8035906020019184602083028401116401000000008311171561080557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561085557600080fd5b82018360208201111561086757600080fd5b8035906020019184602083028401116401000000008311171561088957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156108d957600080fd5b8201836020820111156108eb57600080fd5b8035906020019184602083028401116401000000008311171561090d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506121bf945050505050565b6101f9612226565b6101f961222c565b6102f36004803603602081101561097157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612232565b60008061099a33610f9f565b90506109fb33306109dc6103e86109d66109c16007546103e861238890919063ffffffff16565b6bffffffffffffffffffffffff8e16906123e2565b9061243b565b73ffffffffffffffffffffffffffffffffffffffff8f1692919061247d565b6000876bffffffffffffffffffffffff1611610a5e576040805162461bcd60e51b815260206004820152601a60248201527f63616e6e6f742061756374696f6e207a65726f20746f6b656e73000000000000604482015290519081900360640190fd5b6000866bffffffffffffffffffffffff1611610aab5760405162461bcd60e51b81526004018080602001828103825260238152602001806139446023913960400191505060405180910390fd5b60008511610aea5760405162461bcd60e51b8152600401808060200182810382526036815260200180613a5f6036913960400191505060405180910390fd5b87891115610b295760405162461bcd60e51b8152600401808060200182810382526029815260200180613b7d6029913960400191505060405180910390fd5b60068054600190810191829055600091825260205260409020610b4b90612518565b604080516101c08101825273ffffffffffffffffffffffffffffffffffffffff808e1682528c16602082015242808c019282018390528a01606082018190529060808101610b9a858b8d61255c565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff168152602001600015158152602001861515815260200160075481526020018781525060026000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff166006547fa92661149edb0f48f9ae55773e4d477ab8a61006bd5204ff2596fd0f85546d1885858e8e8e8e60405180878152602001868152602001856bffffffffffffffffffffffff168152602001846bffffffffffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390a450506006549b9a5050505050505050505050565b600081815260026020526040812060030154421115610e4f57506000610e6e565b600082815260026020526040902060030154610e6b90426125bb565b90505b919050565b60055467ffffffffffffffff1681565b600554600090610ea790610ea29067ffffffffffffffff166001612388565b6125fd565b600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9283161790819055610eec91600391168461264a565b610f3d576040805162461bcd60e51b815260206004820152601760248201527f5573657220616c72656164792072656769737465726564000000000000000000604482015290519081900360640190fd5b506005546040805167ffffffffffffffff9092168083529051909173ffffffffffffffffffffffffffffffffffffffff8416917f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c9181900360200190a2919050565b6000610fac600383612829565b15610fc357610fbc600383612861565b9050610e6e565b610fcc82610e83565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a3919050565b600081815260026020526040812060030154829080158015906110445750804210155b801561105f5750600082815260026020526040902060080154155b61109a5760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b50600083815260026020526040812060040154819081906110ba90612917565b6000898152600260205260408120600681015460079091015494975092955090935090919080845b60008b81526001602052604081206110fa9086612926565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000181141561112a5750611183565b80945061113685612917565b6bffffffffffffffffffffffff918216965016935061115790508684612388565b955061117390506bffffffffffffffffffffffff8716836123e2565b61117d86856123e2565b106110e2575b6000851180156111b357506111a66bffffffffffffffffffffffff8716836123e2565b6111b086856123e2565b10155b1561128a5760006111e06111d9856109d66bffffffffffffffffffffffff8b16876123e2565b87906125bb565b90508083106112615760006111f584836125bb565b9050611200816129d2565b60008e815260026020526040902060090180547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9290921691909117905561125687836125bb565b9650859b5050611284565b61126b86846125bb565b955061128160008861127c896129d2565b61255c565b9a505b50611302565b866bffffffffffffffffffffffff168511156112b6576112af60008761127c886129d2565b9950611302565b6112c26000878961255c565b99506112ff6112fa886bffffffffffffffffffffffff166109d6896bffffffffffffffffffffffff16896123e290919063ffffffff16565b6129d2565b90505b60008b8152600260205260409020600881018b9055600b01548510156113695760008b815260026020526040902060090180547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff166c010000000000000000000000001790555b6113838b826bffffffffffffffffffffffff168a89612a1f565b604080516bffffffffffffffffffffffff8084168252871660208201528082018c905290518c917f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f5910919081900360600190a25050506000978852505060026020525050604084206004810185905560078101859055600681018590556005019390935550919050565b6000828152600260205260409020600301548290801580159061142f5750804210155b801561144a5750600082815260026020526040902060080154155b6114855760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b506000838152600260205260408120600401546114a190612917565b6000878152600260205260408120600681015460079091015492955093509091505b858110156115195760008781526001602052604090206114e39083612926565b915060006114f083612917565b925061150e91508590506bffffffffffffffffffffffff8316612388565b9350506001016114c3565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000181141561158f576040805162461bcd60e51b815260206004820152601960248201527f7265616368656420656e64206f66206f72646572206c69737400000000000000604482015290519081900360640190fd5b60008061159b83612917565b92509250506115cf816bffffffffffffffffffffffff16866bffffffffffffffffffffffff166123e290919063ffffffff16565b6115e7856bffffffffffffffffffffffff85166123e2565b10611639576040805162461bcd60e51b815260206004820152601960248201527f746f6f206d616e79206f72646572732073756d6d656420757000000000000000604482015290519081900360640190fd5b5050600095865260026020526040909520600681019190915560070193909355505050565b611666612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146116d5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600f8211156117155760405162461bcd60e51b815260040180806020018281038252602d8152602001806139e1602d913960400191505060405180910390fd5b61171e81610f9f565b600880547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691909117905550600755565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460088801546009890154600a8a0154600b909a015473ffffffffffffffffffffffffffffffffffffffff998a169b9099169997989697959694959394929391926bffffffffffffffffffffffff82169260ff6c0100000000000000000000000084048116936d0100000000000000000000000000900416918e565b60085467ffffffffffffffff1681565b60008281526001602052604081206118359083612b9a565b90505b92915050565b611846612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146118b5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6000828152600260205260408120600801548190849061198b576040805162461bcd60e51b815260206004820152601860248201527f41756374696f6e206e6f74207965742066696e69736865640000000000000000604482015290519081900360640190fd5b60005b8451811015611a28576119cf8582815181106119a657fe5b602002602001015160016000898152602001908152602001600020612bc390919063ffffffff16565b611a20576040805162461bcd60e51b815260206004820152601c60248201527f6f72646572206973206e6f206c6f6e67657220636c61696d61626c6500000000604482015290519081900360640190fd5b60010161198e565b50611a31613807565b50600085815260026020818152604080842081516101c081018352815473ffffffffffffffffffffffffffffffffffffffff90811682526001830154169381019390935292830154908201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008820154610100820181905260098301546bffffffffffffffffffffffff811661012084015260ff6c010000000000000000000000008204811615156101408501526d0100000000000000000000000000909104161515610160830152600a830154610180830152600b909201546101a082015291908190611b3190612917565b92509250506000611b5588600081518110611b4857fe5b6020026020010151612917565b505060008a8152600260205260408120600901549192506c0100000000000000000000000090910460ff16905b8951811015611dd4576000806000611b9f8d8581518110611b4857fe5b9250925092508567ffffffffffffffff168367ffffffffffffffff1614611bf75760405162461bcd60e51b8152600401808060200182810382526023815260200180613adc6023913960400191505060405180910390fd5b8415611c1c57611c158b6bffffffffffffffffffffffff8316612388565b9a50611d62565b8861010001518d8581518110611c2e57fe5b60200260200101511415611ccc57611c8c611c85886bffffffffffffffffffffffff166109d68b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff166123e290919063ffffffff16565b8d90612388565b9b50611c15611cc58a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff166125bb90919063ffffffff16565b8c90612388565b611cf78961010001518e8681518110611ce157fe5b6020026020010151612bef90919063ffffffff16565b15611d4757611d40611c85886bffffffffffffffffffffffff166109d68b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff166123e290919063ffffffff16565b9b50611d62565b611d5f8b6bffffffffffffffffffffffff8316612388565b9a505b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a3505050600101611b82565b50611de18a898985612d3c565b5050505050509250929050565b6000828152600260208190526040909120015482904210611e405760405162461bcd60e51b81526004018080602001828103825260328152602001806139676032913960400191505060405180910390fd5b6000611e4b33610f9f565b90506000805b8451811015611f85576000611e94868381518110611e6b57fe5b6020026020010151600160008a8152602001908152602001600020612dba90919063ffffffff16565b90508015611f7c576000806000611eb0898681518110611b4857fe5b9250925092508667ffffffffffffffff168367ffffffffffffffff1614611f085760405162461bcd60e51b81526004018080602001828103825260238152602001806138fb6023913960400191505060405180910390fd5b611f20866bffffffffffffffffffffffff8316612388565b604080516bffffffffffffffffffffffff808616825284166020820152815192985067ffffffffffffffff8a16928d927f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4928290030190a35050505b50600101611e51565b50600085815260026020526040902060010154611fb99073ffffffffffffffffffffffffffffffffffffffff163383612e0f565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60008481526002602052604090206003015484908015801590611fff5750804210155b801561201a5750600082815260026020526040902060080154155b6120555760405162461bcd60e51b8152600401808060200182810382526028815260200180613aff6028913960400191505060405180910390fd5b506000858152600260205260409020600901546d0100000000000000000000000000900460ff166120b75760405162461bcd60e51b81526004018080602001828103825260288152602001806138a26028913960400191505060405180910390fd5b835160011480156120c9575082516001145b6121045760405162461bcd60e51b8152600401808060200182810382526027815260200180613a0e6027913960400191505060405180910390fd5b600061210f33610f9f565b905061215f612147828760008151811061212557fe5b60200260200101518760008151811061213a57fe5b602002602001015161255c565b60008881526002602052604090206007015490612bef565b61219a5760405162461bcd60e51b81526004018080602001828103825260318152602001806138ca6031913960400191505060405180910390fd5b6121a686868686612ea1565b506121b086611021565b50505050505050565b60065481565b600084815260026020526040812060030154859042106122105760405162461bcd60e51b8152600401808060200182810382526022815260200180613bd06022913960400191505060405180910390fd5b61221c86868686612ea1565b9695505050505050565b6103e881565b60075481565b61223a612b96565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146122a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166122fb5760405162461bcd60e51b815260040180806020018281038252602681526020018061391e6026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082820183811015611835576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826123f157506000611838565b828202828482816123fe57fe5b04146118355760405162461bcd60e51b8152600401808060200182810382526021815260200180613a956021913960400191505060405180910390fd5b600061183583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613199565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261251290859061323b565b50505050565b60016000818152602083815260408083207fffffffffffffffffffffffffffffffffffffffff00000000000000000000000190819055835293830190529190912055565b7fffffffffffffffff00000000000000000000000000000000000000000000000060c084901b1677ffffffffffffffffffffffff000000000000000000000000606084901b16016bffffffffffffffffffffffff8216015b9392505050565b600061183583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506132f9565b60006801000000000000000082106126465760405162461bcd60e51b8152600401808060200182810382526026815260200180613ab66026913960400191505060405180910390fd5b5090565b600073ffffffffffffffffffffffffffffffffffffffff82166126b4576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f7420696e73657274207a65726f2061646472657373000000000000604482015290519081900360640190fd5b67ffffffffffffffff8381161415612713576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420696e73657274206d61782075696e7436340000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260018501602052604090205467ffffffffffffffff16151580612783575067ffffffffffffffff600184011660009081526020859052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b15612790575060006125b4565b50600191820167ffffffffffffffff1660008181526020858152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff969096169586179055938252948401909452922080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690921790915590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205467ffffffffffffffff16151590565b600061286d8383612829565b6128be576040805162461bcd60e51b815260206004820152601b60248201527f4d7573742068617665204164647265737320746f206765742049440000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205467ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60c081901c91606082901c9190565b60007fffffffffffffffffffffffffffffffffffffffff0000000000000000000000018214156129875760405162461bcd60e51b81526004018080602001828103825260228152602001806139996022913960400191505060405180910390fd5b600082815260208490526040902054806118355760405162461bcd60e51b815260040180806020018281038252602a815260200180613a35602a913960400191505060405180910390fd5b60006c0100000000000000000000000082106126465760405162461bcd60e51b815260040180806020018281038252602681526020018061387c6026913960400191505060405180910390fd5b6000848152600260205260408120600a0154612a52906103e8906109d6906bffffffffffffffffffffffff8616906123e2565b6000868152600260205260409020600901549091506c01000000000000000000000000900460ff1615612aa857612aa385612a9b6bffffffffffffffffffffffff851684612388565b600086612d3c565b611fb9565b6000858152600260205260408120600801548190612ac590612917565b909350915060009050612ae66bffffffffffffffffffffffff8616886125bb565b90506000612b10612b096bffffffffffffffffffffffff88166109d688866123e2565b8390612388565b90506000612b47856bffffffffffffffffffffffff166109d6866bffffffffffffffffffffffff168c6123e290919063ffffffff16565b9050612b558a83838b612d3c565b612b8a8a612b756bffffffffffffffffffffffff8a166109d68a8e6123e2565b60085460009067ffffffffffffffff16612d3c565b50505050505050505050565b3390565b60006001821415612bad57506000611838565b5060009081526020919091526040902054151590565b600080612bd08484612dba565b9050801561183557600092835260019390930160205250604081205590565b600080600080612bfe86612917565b9250925092506000806000612c1288612917565b91945092509050612c346bffffffffffffffffffffffff8084169086166123e2565b612c4f6bffffffffffffffffffffffff8781169084166123e2565b1015612c645760019650505050505050611838565b612c7f6bffffffffffffffffffffffff8381169086166123e2565b612c9a6bffffffffffffffffffffffff8781169084166123e2565b1115612caf5760009650505050505050611838565b8267ffffffffffffffff168667ffffffffffffffff161415612d025760405162461bcd60e51b815260040180806020018281038252602d815260200180613b27602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015612d2d5760019650505050505050611838565b50600098975050505050505050565b6000612d49600383613353565b90508315612d8157600085815260026020526040902054612d819073ffffffffffffffffffffffffffffffffffffffff168286612e0f565b8215611fb957600085815260026020526040902060010154611fb99073ffffffffffffffffffffffffffffffffffffffff168285612e0f565b6000612dc68383612b9a565b612dd257506000611838565b5060008181526001838101602081815260408085205487835281862080548288528388208190558752938352908520559383529390925290915590565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612e9c90849061323b565b505050565b60008481526002602052604081206004015481908190612ec090612917565b92509250506000612ed033610f9f565b6000898152600260205260408120600501549195505b885181101561315857612f31888281518110612efe57fe5b60200260200101516bffffffffffffffffffffffff16856bffffffffffffffffffffffff166123e290919063ffffffff16565b612f73866bffffffffffffffffffffffff168b8481518110612f4f57fe5b60200260200101516bffffffffffffffffffffffff166123e290919063ffffffff16565b10612faf5760405162461bcd60e51b8152600401808060200182810382526029815260200180613b546029913960400191505060405180910390fd5b81888281518110612fbc57fe5b60200260200101516bffffffffffffffffffffffff1611613024576040805162461bcd60e51b815260206004820152600f60248201527f6f7264657220746f6f20736d616c6c0000000000000000000000000000000000604482015290519081900360640190fd5b600061308361304d888c858151811061303957fe5b60200260200101518c868151811061213a57fe5b89848151811061305957fe5b6020026020010151600160008f81526020019081526020016000206133e79092919063ffffffff16565b9050801561314f576130bf89838151811061309a57fe5b60200260200101516bffffffffffffffffffffffff168561238890919063ffffffff16565b93508667ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c85815181106130fa57fe5b60200260200101518c868151811061310e57fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b50600101612ee6565b5060008981526002602052604090206001015461318d9073ffffffffffffffffffffffffffffffffffffffff1633308561247d565b50505050949350505050565b600081836132255760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131ea5781810151838201526020016131d2565b50505050905090810190601f1680156132175780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161323157fe5b0495945050505050565b606061329d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135c59092919063ffffffff16565b805190915015612e9c578080602001905160208110156132bc57600080fd5b5051612e9c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ba6602a913960400191505060405180910390fd5b6000818484111561334b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156131ea5781810151838201526020016131d2565b505050900390565b600061335f83836135dc565b6133b0576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520494420746f2067657420416464726573730000000000604482015290519081900360640190fd5b5060010167ffffffffffffffff166000908152602091909152604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000806133f384612917565b925050506bffffffffffffffffffffffff8116613457576040805162461bcd60e51b815260206004820152601f60248201527f496e73657274696e67207a65726f206973206e6f7420737570706f7274656400604482015290519081900360640190fd5b6001841480159061348857507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000018414155b6134d9576040805162461bcd60e51b815260206004820152601e60248201527f496e73657274696e6720656c656d656e74206973206e6f742076616c69640000604482015290519081900360640190fd5b6134e38585612b9a565b156134f25760009150506125b4565b6001831480159061351157506000838152600186016020526040902054155b156135205760009150506125b4565b61352a8385612bef565b6135385760009150506125b4565b5b6000838152602086905260409020546135645760009283526001850160205260409092205491613539565b6000835b6000818152602088905260409020549091506135848187612bef565b613568576000828152602088815260408083208990558383526001808b0183528184208a905589845281842095909555908990529020559150509392505050565b60606135d48484600085613614565b949350505050565b60010167ffffffffffffffff166000908152602091909152604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b6060824710156136555760405162461bcd60e51b81526004018080602001828103825260268152602001806139bb6026913960400191505060405180910390fd5b61365e8561379b565b6136af576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061371957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016136dc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461377b576040519150601f19603f3d011682016040523d82523d6000602084013e613780565b606091505b50915091506137908282866137a1565b979650505050505050565b3b151590565b606083156137b05750816125b4565b8251156137c05782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156131ea5781810151838201526020016131d2565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091529056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e207068617365547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e35254f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a2646970667358221220f95a61e281d5ecad9af81b4bbc3d8066bf9d1e2aea7152e90ca8d4b78d25027964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1668,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "sellOrders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Data)3267_storage)"
      },
      {
        "astId": 1672,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(AuctionData)1664_storage)"
      },
      {
        "astId": 1674,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)3076_storage"
      },
      {
        "astId": 1676,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "numUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 1678,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "auctionCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1687,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "contracts/EasyAuction.sol:EasyAuction",
        "label": "feeReceiverUserId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)981": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)1664_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EasyAuction.AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)1664_storage"
      },
      "t_mapping(t_uint256,t_struct(Data)3267_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)3267_storage"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AuctionData)1664_storage": {
        "encoding": "inplace",
        "label": "struct EasyAuction.AuctionData",
        "members": [
          {
            "astId": 1637,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctioningToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)981"
          },
          {
            "astId": 1639,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "biddingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)981"
          },
          {
            "astId": 1641,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "orderCancellationEndDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1643,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "auctionEndDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1645,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "initialAuctionOrder",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 1647,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minimumBiddingAmountPerOrder",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1649,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimSumBidAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1651,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "interimOrder",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 1653,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "clearingPriceOrder",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 1655,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "volumeClearingPriceOrder",
            "offset": 0,
            "slot": "9",
            "type": "t_uint96"
          },
          {
            "astId": 1657,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minFundingThresholdNotReached",
            "offset": 12,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 1659,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "isAtomicClosureAllowed",
            "offset": 13,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 1661,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1663,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "minFundingThreshold",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Data)3076_storage": {
        "encoding": "inplace",
        "label": "struct IdToAddressBiMap.Data",
        "members": [
          {
            "astId": 3071,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "idToAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint64,t_address)"
          },
          {
            "astId": 3075,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "addressToId",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint64)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)3267_storage": {
        "encoding": "inplace",
        "label": "struct IterableOrderedOrderSet.Data",
        "members": [
          {
            "astId": 3262,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "nextMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 3266,
            "contract": "contracts/EasyAuction.sol:EasyAuction",
            "label": "prevMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}